# -*- coding: utf-8 -*-
"""reducer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZY2fKPR7Fah5ro8wMQkigaDEnj09Qun-
"""

#!/usr/bin/python3
"""reducer.py"""

from operator import itemgetter
import sys

current_word = None
current_count = 0
word = None

# input comes from STDIN
# NOTE: Reducer input is the mergerd and sorted output of the mapper
# EXAMPLE input:
#(I  1)
#(I  1)
#(I  1)
#(I  1)
#(love  1)
#(love  1)
#(loves  1)
#(loves  1)
#(Oklahoma  1)
#(Oklahoma  1)
# The above input comes from multiple file input lines which contains multiple "I", "love", "loves", and "Oklahoma"
for line in sys.stdin:
    # remove leading and trailing whitespace
    # Similar to mapper, reducer also processes the input line by line from the intermediate mapper output
    line = line.strip()
    # parse the input we got from mapper.py
    word, count = line.split('\t', 1)#(Oklahoma,1)

    # convert count (currently a string) to int
    try:
        count = int(count)
    except ValueError:
        # count was not a number, so silently
        # ignore/discard this line
        continue

    # this IF-switch only works because Hadoop sorts map output
    # by key (here: word) before it is passed to the reducer
    # The below statements increments the counter only if the word from "line" is the current_word
    # Else writes the current_word and its count along with updating the current_word
    if current_word == word:
        current_count += count
    else:
        if current_word:
            # write result to STDOUT
            print('%s\t%s' % (current_word, current_count))
        current_count = count
        current_word = word

# do not forget to output the last word if needed!
if current_word == word:
    print('%s\t%s' % (current_word, current_count))
    
# EXAMPLE OUTPUT:
#(I  4)
#(love  2)
#(loves  2)
#(loves  2)
# The above output is the final output of the job

#Hadoop command template
#hadoop jar /usr/local/hadoop-3.3.0/share/hadoop/tools/lib/hadoop-streaming-3.3.0.jar -mapper "python3 /home/<USERNAME>/mapper.py" -reducer "python3 /home/<USERNAME>/reducer.py" -input /user/<USERNAME>/INPUT.txt -output /user/<USERNAME>/sampleOutputN

#Example Hadoop Command with <USERNAME> = sakaml and the input file (file2.txt) is copied to the directory "Sample"
#hadoop jar /usr/local/hadoop-3.3.0/share/hadoop/tools/lib/hadoop-streaming-3.3.0.jar -mapper "python3 /home/sakamal/mapper.py" -reducer "python3 /home/sakamal/reducer.py" -input /user/sakamal/Sample/file2.txt -output /user/sakamal/sampleOutputN